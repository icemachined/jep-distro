name: Create release to Maven Central

on:
  push:
    tags:
      - '*'
    branches:
      - master
env:
  PGP_SEC: ${{ secrets.PGP_SEC }}
  PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}
  OSSRH_USERNAME: ${{ secrets.SONATYPE_USER }}
  OSSRH_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  JEP_VERSION: '4.2.0'

jobs:
  install_and_collect_jep_artifacts:
    name: Install and collect
    runs-on: ${{ matrix.os }}
    # if workflow is triggered after push of a tag, deploy full release
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-latest, macos-latest ]
        python: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          - python: '3.6'
            python-version: '3.6.8'
          - python: '3.7'
            python-version: '3.7.9'
          - python: '3.8'
            python-version: '3.8.10'
          - python: '3.9'
            python-version: '3.9.13'
          - python: '3.10'
            python-version: '3.10.11'
          - python: '3.11'
            python-version: '3.11.7'
          - python: '3.12'
            python-version: '3.12.1'

    steps:
      - name: Set up Python ${{ matrix.python }}
        id: python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip3 install setuptools wheel numpy
          pip3 install jep==${{ env.JEP_VERSION }} --no-build-isolation --verbose
      - name: Use GNU tar
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache jep-distro
        uses: actions/cache@v3
        with:
          path: jep-distro-${{ runner.os }}-${{ matrix.python }}
          key: ${{ runner.os }}-${{ matrix.python }}-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-jep-distro-release
      - name: Copy jep artifacts on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp -L ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.so jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/*.py jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.jnilib jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/libjep.x86_64.jnilib
      - name: Copy jep artifacts on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -f jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/site-packages/jep/jep.dll jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
  create_release:
    name: Create github release
    runs-on: ubuntu-latest
    # if workflow is triggered after push of a tag, deploy full release
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: install_and_collect_jep_artifacts

    steps:
      - name: Create github release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build_and_publish:
    name: Build and publish release
    runs-on: ubuntu-latest
    # if workflow is triggered after push of a tag, deploy full release
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: create_release
    strategy:
      matrix:
        python: ['3.6','3.7','3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # release workflow should have access to all tags
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
      - name: Status git before
        run: git status
      - name: Cache jep-distro-Linux-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-Linux-${{ matrix.python }}
          key: Linux-${{ matrix.python }}-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            Linux-${{ matrix.python }}-jep-distro-release
      - name: Cache jep-distro-macOS-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-macOS-${{ matrix.python }}
          key: macOS-${{ matrix.python }}-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            macOS-${{ matrix.python }}-jep-distro-release
      - name: Cache jep-distro-Windows-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-Windows-${{ matrix.python }}
          key: Windows-${{ matrix.python }}-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            Windows-${{ matrix.python }}-jep-distro-release
      - name: Archive jep artifacts
        run: |
          mkdir -p build/jep
          cp jep-distro-Linux-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-Windows-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-macOS-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
      - name: Gradle release
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-disabled: true
          arguments: |
            publishToSonatype
            closeSonatypeStagingRepository
            --build-cache
            -PgprUser=${{ github.actor }}
            -PgprKey=${{ secrets.GITHUB_TOKEN }}
            -Ppython.suffix=${{ matrix.python }}
      - name: Upload jep distro
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/distributions/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
  cleanup_caches:
    name: Cleanup caches
    runs-on: ubuntu-latest
    needs: build_and_publish
    steps:
      - name: Cleanup release caches
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 | grep ".*-.*-jep-distro-release$" )
          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
