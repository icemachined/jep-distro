name: Create release to Maven Central

on:
  push:
    tags:
      - '*'
    branches:
      - master
env:
  PGP_SEC: ${{ secrets.PGP_SEC }}
  PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}
  OSSRH_USERNAME: ${{ secrets.SONATYPE_USER }}
  OSSRH_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
  DEFAULT_PYTHON: '3.10'
  JEP_VERSION: '4.1.0'

jobs:
  install_and_collect_jep_artifacts:
    name: Install and collect
    runs-on: ${{ matrix.os }}
    # if workflow is triggered after push of a tag, deploy full release
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: 3.10.9
      - name: Install dependencies
        run: |
          pip3 install jep==${{ env.JEP_VERSION }}
      - name: Use GNU tar
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache jep-distro
        uses: actions/cache@v3
        with:
          path: jep-distro-${{ runner.os }}
          key: ${{ runner.os }}-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            ${{ runner.os }}-jep-distro-release
      - name: Copy jep artifacts on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp -L ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/libjep.so jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
          cp ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/*.py jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/libjep.jnilib jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -f jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/site-packages/jep/jep.dll jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
  build_and_publish:
    name: Build and publish release
    runs-on: ${{ matrix.os }}
    # if workflow is triggered after push of a tag, deploy full release
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: install_and_collect_jep_artifacts
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # release workflow should have access to all tags
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Status git before
        run: git status
      - name: Cache jep-distro-Linux
        uses: actions/cache@v3
        with:
          path: jep-distro-Linux
          key: Linux-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            Linux-jep-distro-release
      - name: Cache jep-distro-macOS
        uses: actions/cache@v3
        with:
          path: jep-distro-macOS
          key: macOS-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            macOS-jep-distro-release
      - name: Cache jep-distro-Windows
        uses: actions/cache@v3
        with:
          path: jep-distro-Windows
          key: Windows-jep-distro-release
          enableCrossOsArchive: true
          restore-keys: |
            Windows-jep-distro-release
      - name: Archive jep artifacts
        run: |
          mkdir -p build/jep
          cp jep-distro-Linux/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-Windows/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-macOS/jep-${{ env.JEP_VERSION }}/* build/jep
      - name: Gradle release
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-disabled: true
          arguments: |
            publishToSonatype
            closeSonatypeStagingRepository
            --build-cache
            -PgprUser=${{ github.actor }}
            -PgprKey=${{ secrets.GITHUB_TOKEN }}
      - name: Create github release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload jep distro
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/distributions/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
      - name: Cleanup release caches
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}
          echo "Fetching list of cache key"
          cacheKeysForPR="Windows-jep-distro-release Linux-jep-distro-release macOS-jep-distro-release"
          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
