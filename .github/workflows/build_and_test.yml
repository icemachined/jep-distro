name: Build and test

on:
  pull_request:
  push:
    branches:
      - 'master'
env:
  JEP_VERSION: '4.1.1'

jobs:
  install_and_collect_jep_artifacts:
    name: Install and collect
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python: ['3.9', '3.10', '3.11']
        include:
          - python: '3.9'
            python-version: '3.9.16'
          - python: '3.10'
            python-version: '3.10.9'
          - python: '3.11'
            python-version: '3.11.1'
    steps:
      - name: Set up Python ${{ matrix.python }}
        id: python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip3 install jep==${{ env.JEP_VERSION }} --use-pep517
      - name: Use GNU tar
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache jep-distro
        uses: actions/cache@v3
        with:
          path: jep-distro-${{ runner.os }}
          key: ${{ runner.os }}-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            ${{ runner.os }}-jep-distro
      - name: Copy jep artifacts on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp -L ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.so jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/*.py jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.jnilib jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -f jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/site-packages/jep/jep.dll jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
  archive_and_build:
    name: Archive and build
    runs-on: ${{ matrix.os }}
    needs: install_and_collect_jep_artifacts
    strategy:
      matrix:
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # release workflow should have access to all tags
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Status git before
        run: git status
      - name: Cache jep-distro-Linux
        uses: actions/cache@v3
        with:
          path: jep-distro-Linux
          key: Linux-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            Linux-jep-distro
      - name: Cache jep-distro-macOS
        uses: actions/cache@v3
        with:
          path: jep-distro-macOS
          key: macOS-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            macOS-jep-distro
      - name: Cache jep-distro-Windows
        uses: actions/cache@v3
        with:
          path: jep-distro-Windows
          key: Windows-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            Windows-jep-distro
      - name: Archive jep artifacts
        run: |
          mkdir -p build/jep
          cp jep-distro-Linux/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-Windows/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-macOS/jep-${{ env.JEP_VERSION }}/* build/jep
      - name: gradle build
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-disabled: true
          arguments: |
            build
      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: jep-distro-cp${{ matrix.python }}-${{ env.JEP_VERSION }}.tgz
          path: build/distributions/*
          retention-days: 1
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR="Windows-jep-distro Linux-jep-distro macOS-jep-distro"

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}



