name: Build and test

on:
  pull_request:
  push:
    branches:
      - 'master'
env:
  DEFAULT_PYTHON: '3.10'
  JEP_VERSION: '4.1.0'

jobs:
  install_and_collect_jep_artifacts:
    name: Install and collect
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: 3.10.9
      - name: Install dependencies
        run: |
          pip3 install jep==${{ env.JEP_VERSION }}
      - name: Use GNU tar
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache jep-distro
        uses: actions/cache@v3
        with:
          path: ~/jep-distro-${{ runner.os }}
          key: ${{ runner.os }}-jep-distro
          restore-keys: |
            ${{ runner.os }}-jep-distro
      - name: Copy jep artifacts on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp -L ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/libjep.so ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
          cp ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/*.py ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/python${{ env.DEFAULT_PYTHON }}/site-packages/jep/libjep.jnilib ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -f ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/site-packages/jep/jep.dll ~/jep-distro-${{ runner.os }}/jep-${{ env.JEP_VERSION }}/
  archive_and_build:
    name: Archive and build
    runs-on: ${{ matrix.os }}
    needs: install_and_collect_jep_artifacts
    strategy:
      matrix:
        os: [ ubuntu-latest ]

    steps:
      # actions/checkout v1.* is needed for correct codecov upload, see https://github.com/actions/checkout/issues/237 for details
      - uses: actions/checkout@v1
      # ensure that gradle wrapper files in repository are valid by checking checksums
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache jep-distro-Linux
        uses: actions/cache@v3
        with:
          path: ~/jep-distro-Linux
          key: Linux-jep-distro
          restore-keys: |
            Linux-jep-distro
      - name: Cache jep-distro-macOS
        uses: actions/cache@v3
        with:
          path: ~/jep-distro-macOS
          key: macOS-jep-distro
          restore-keys: |
            macOS-jep-distro
      - name: Cache jep-distro-Windows
        uses: actions/cache@v3
        with:
          path: ~/jep-distro-Windows
          key: Windows-jep-distro
          restore-keys: |
            Windows-jep-distro
      - name: Archive jep artifacts
        run: |
          find ~/ -name "jep.dll"|xargs -i cp {} ~/jep-distro-Linux/jep-${{ env.JEP_VERSION }}
          cp ~/jep-distro-macOS/jep-${{ env.JEP_VERSION }}/* ~/jep-distro-Linux/jep-${{ env.JEP_VERSION }}
          mkdir build
          tar czvf build/jep-distro-${{ env.JEP_VERSION }}.tar.gz ~/jep-distro-Linux/jep-${{ env.JEP_VERSION }}
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=['Windows-jep-distro', 'Linux-jep-distro', 'macOS-jep-distro']

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
