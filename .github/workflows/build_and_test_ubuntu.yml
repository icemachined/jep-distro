name: Build and test ubuntu 18

on:
  pull_request:
  push:
    branches:
      - 'master'
env:
  JEP_VERSION: '4.1.1'
  AGENT_TOOLSDIRECTORY: '/opt/hostedtoolcache'

jobs:
  install_and_collect_jep_artifacts:
    name: Install and collect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.10']
        include:
          - python: '3.10'
            python-version: '3.10.9'

    container:
      image: ubuntu:18.04

    steps:
      - name: Display APT version
        run: |
          echo '```'         >>${GITHUB_STEP_SUMMARY}
          apt-get --version  >>${GITHUB_STEP_SUMMARY}
          echo '```'         >>${GITHUB_STEP_SUMMARY}
        shell: bash

      - name: Configure APT
        run: |
          # Ignore KEYEXPIRED errors
          ls -al /etc/apt/apt.conf.d/
          ls -al /etc/apt/
        shell: bash

      - name: Install dependencies
        continue-on-error: true
        run: |
          # Don't abort the step if apt returns a non-zero status
          set +e
          apt-get --yes update
          apt-get --yes upgrade
          apt-get --yes install build-essential
        shell: bash
      - name: Setup hostedtoolcache
        run: |
          echo $PATH
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          mkdir -p /opt/hostedtoolcache
          echo "RUNNER_TOOL_CACHE: $RUNNER_TOOL_CACHE"
          echo "AGENT_TOOLSDIRECTORY: $AGENT_TOOLSDIRECTORY"
      - name: Set up Python ${{ matrix.python }}
        id: python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Install dependencies
        run: |
          echo $PATH
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "CCE_PYTHON_LD_LIBRARY_PATH: $CCE_PYTHON_LD_LIBRARY_PATH"
          mkdir -p /opt/hostedtoolcache
          export AGENT_TOOLSDIRECTORY=/opt/hostedtoolcache
          echo "RUNNER_TOOL_CACHE: $RUNNER_TOOL_CACHE"
          echo "AGENT_TOOLSDIRECTORY: $AGENT_TOOLSDIRECTORY"
          ls -al /__t/Python/3.10.9/x64/lib
          pip3 install jep==${{ env.JEP_VERSION }} --use-pep517
      - name: Use GNU tar
        if: ${{ runner.os == 'Windows' }}
        shell: cmd
        run: |
          echo "Adding GNU tar to PATH"
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
      - name: Cache jep-distro
        uses: actions/cache@v3
        with:
          path: jep-distro-${{ runner.os }}-${{ matrix.python }}
          key: ${{ runner.os }}-${{ matrix.python }}-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-jep-distro
      - name: Copy jep artifacts on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp -L ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.so jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/*.py jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir -p jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/python${{ matrix.python }}/site-packages/jep/libjep.jnilib jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
      - name: Copy jep artifacts on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -f jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}
          cp ${{ env.pythonLocation }}/lib/site-packages/jep/jep.dll jep-distro-${{ runner.os }}-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/
  archive_and_build:
    name: Archive and build
    runs-on: ubuntu-latest
    needs: install_and_collect_jep_artifacts
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11']

    steps:
      - name: Display APT version
        run: |
          echo '```'         >>${GITHUB_STEP_SUMMARY}
          apt-get --version  >>${GITHUB_STEP_SUMMARY}
          echo '```'         >>${GITHUB_STEP_SUMMARY}
        shell: bash
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # release workflow should have access to all tags
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Status git before
        run: git status
      - name: Cache jep-distro-Linux-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-Linux-${{ matrix.python }}
          key: Linux-${{ matrix.python }}-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            Linux-${{ matrix.python }}-jep-distro
      - name: Cache jep-distro-macOS-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-macOS-${{ matrix.python }}
          key: macOS-${{ matrix.python }}-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            macOS-${{ matrix.python }}-jep-distro
      - name: Cache jep-distro-Windows-${{ matrix.python }}
        uses: actions/cache@v3
        with:
          path: jep-distro-Windows-${{ matrix.python }}
          key: Windows-${{ matrix.python }}-jep-distro
          enableCrossOsArchive: true
          restore-keys: |
            Windows-${{ matrix.python }}-jep-distro
      - name: Archive jep artifacts
        run: |
          mkdir -p build/jep
          cp jep-distro-Linux-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-Windows-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
          cp jep-distro-macOS-${{ matrix.python }}/jep-${{ env.JEP_VERSION }}/* build/jep
      - name: gradle build
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-disabled: true
          arguments: |
            build -Ppython.suffix=${{ matrix.python }}
      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: jep-distro-cp${{ matrix.python }}-${{ env.JEP_VERSION }}.tgz
          path: build/distributions/*
          retention-days: 1
  cleanup_caches:
    name: Cleanup caches
    runs-on: ubuntu-latest
    needs: archive_and_build
    steps:
      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 | grep ".*-.*-jep-distro$" )

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}



